#!/usr/bin/env python
# Version: v.23.08.03
# -*- coding: utf-8 -*-

from multiprocessing import cpu_count
import sys
import shutil
from contextlib import closing
from string import Template
try:
    from venvwaftlib import *
except IOError:
    print("( ERROR ) : Run 'waft-code-aggregate' python script in '.venv-waft' virtual environment.")
    exit(1)
try:
    # Python 2, where io.StringIO fails because it is unicode-only
    from StringIO import StringIO
except ImportError:
    from io import StringIO
try:
    from configparser import RawConfigParser
    parser = RawConfigParser(strict=False)
except ImportError:
    # Python 2, where strict=True doesn't exist
    from ConfigParser import RawConfigParser
    parser = RawConfigParser()

if WAFT_CLEAN == 'true':
    if os.listdir(CODE_ODOO_DIRECTORY):
        for scrap in os.listdir(CODE_ODOO_DIRECTORY):
            if scrap in {'enterprise', 'private'}:
                continue
            scrap_path = os.path.join(CODE_ODOO_DIRECTORY, scrap)
            if os.path.isfile(scrap_path):
                try:
                    os.remove(scrap_path)
                except IOError:
                    logger.error("Can't remove '%s' file.", scrap_path)
                    exit(1)
            elif os.path.isdir(scrap_path):
                try:
                    shutil.rmtree(scrap_path)
                except IOError:
                    logger.error("Can't remove '%s' directory.", scrap_path)
                    exit(1)
    else:
        logger.info("The %s directory is already empty.", CODE_ODOO_DIRECTORY)
else:
    addons_repositories_full_paths = set([ODOO_MAIN_CODE_PATH])
    with open(CODE_ODOO_YAML_FILE) as code_odoo_yaml_file:
        for addons_repository_path in yaml.safe_load(code_odoo_yaml_file):
            addons_repositories_full_paths.add(os.path.abspath(os.path.join(CODE_ODOO_DIRECTORY, addons_repository_path)))
        for addons_repository_full_path in addons_repositories_full_paths:
            print(addons_repository_full_path)
            if not os.path.isdir(os.path.join(addons_repository_full_path, '.git')):
                shutil.rmtree(addons_repository_full_path)
                continue
            if not os.path.isdir(os.path.join(addons_repository_full_path, '.git/refs')):
                shutil.rmtree(addons_repository_full_path)
                continue
            if not os.path.isdir(os.path.join(addons_repository_full_path, '.git/objects')):
                shutil.rmtree(addons_repository_full_path)
                continue
            try:
                check_call(
                    [ "git", "-C", addons_repository_full_path, "reset", "--hard", "HEAD", ],
                    cwd=CODE_ODOO_DIRECTORY,
                    stderr=sys.stderr,
                    stdout=sys.stdout,
                )
                check_call(
                    [ "git", "-C", addons_repository_full_path, "clean", "-fd", ],
                    cwd=CODE_ODOO_DIRECTORY,
                    stderr=sys.stderr,
                    stdout=sys.stdout,
                )
            except GitError:
                shutil.rmtree(addons_repository_full_path)

def aggregate(config):
    """Execute git aggregator to pull git code.

    :param str config:
        Path where to find the ``odoo-code.yaml`` file.
    """
    logger.info("Running gitaggregate with %s", config)
    cmd = ["gitaggregate", "--expand-env", "--config", config, "--log-level", WAFT_LOG_LEVEL, "--jobs", str(cpu_count() or 1), "aggregate"]
    logger.info("Running '%s' in '%s'", ' '.join(cmd), CODE_ODOO_DIRECTORY)
    check_call(
        cmd,
        cwd=CODE_ODOO_DIRECTORY,
        stderr=sys.stderr,
        stdout=sys.stdout,
    )

def missing_code_odoo_repositories_config():
    """Find the undefined repositories and return their default configuration.

    :return dict:
        git-aggregator-ready configuration dict for undefined repositories.
    """
    defined, expected = set(), {ODOO_MAIN_CODE_PATH}
    # Find the repositories defined by hand
    try:
        with open(CODE_ODOO_YAML_FILE) as code_odoo_yaml_file:
            for addons_repository_path in yaml.safe_load(code_odoo_yaml_file):
                defined.add(os.path.abspath(os.path.join(CODE_ODOO_DIRECTORY, addons_repository_path)))
    except (IOError, AttributeError):
        logger.debug("No repositories defined by hand")
    # Find the repositories that should be present
    try:
        with open(CODE_ODOO_YAML_FILE) as code_odoo_yaml_file:
            for addons_repository_path in yaml.safe_load(code_odoo_yaml_file):
                if addons_repository_path == "enterprise":
                    continue
                if addons_repository_path == "private":
                    continue
                if addons_repository_path == "odoo/addons":
                    repo_path = ODOO_MAIN_CODE_PATH
                else:
                    repo_path = os.path.abspath(os.path.join(CODE_ODOO_DIRECTORY, addons_repository_path))
                if not os.path.exists(repo_path):
                    expected.add(repo_path)
                else:
                    if os.path.isdir(repo_path):
                        if len(os.listdir(repo_path)) == 0:
                            expected.add(repo_path)
                    else:
                        expected.add(repo_path)
    except (IOError, AttributeError):
        logger.debug("No addons are expected to be present")
    # Find the undefined repositories and generate a config for them
    missing = expected - defined
    if missing:
        for repo_path in missing:
            if not os.path.exists(repo_path):
                print("\n\n( ERROR ) : " + repo_path + " addons directory does not exist!")
            else:
                if os.path.isdir(repo_path):
                    if len(os.listdir(repo_path)) == 0:
                        print("\n\n( ERROR ) : " + repo_path + " addons directory is empty!")
                else:
                    print("\n\n( ERROR ) : " + repo_path + " addons not a directory!")
        sys.exit("\n\n\n compare addons.yaml with odoo-code.yaml and correct them.\n\n\n")

# Aggregate user-specified odoo-code repositories.
if os.path.isfile(CODE_ODOO_YAML_FILE):
    aggregate(CODE_ODOO_YAML_FILE)

# Aggregate unspecified odoo-code repositories.
missing_config = missing_code_odoo_repositories_config()


# Get the enabled paths
addons_full_paths = {}
for addon_name, addons_repository_path in addons_config():
    addons_repository_full_path = os.path.realpath(os.path.join(CODE_ODOO_DIRECTORY, addons_repository_path))
    addons_full_paths.setdefault(addons_repository_full_path, set())
    addons_full_paths[addons_repository_full_path].add(addon_name)
logger.debug("Addon paths enabled: %s", addons_full_paths)

# Traverse src dir and remove anything not explicitly enabled
for directory, subdirectories, subfiles in os.walk(CODE_ODOO_DIRECTORY):
    if False == True:
        print(subfiles)
    logger.debug("Checking for cleanup directory %s", directory)
    # Skip main src directory
    if directory == CODE_ODOO_DIRECTORY:
        continue
    # Always skip enterprise/*
    if directory.endswith == "odoo-code/enterprise":
        subdirectories[:] = []
        continue
    # Always skip private/*
    if directory.endswith == "odoo-code/private":
        subdirectories[:] = []
        continue
    # Inside the odoo dir, skip all but addons dir
    if directory == ODOO_MAIN_CODE_PATH and WAFT_CLEAN == 'false':
        subdirectories[:] = ["addons"]
        continue
    # Leave .git directories unless we are really CLEAN-ing
    if directory.endswith("/.git") and WAFT_CLEAN == 'false':
        subdirectories[:] = []
        continue
    # Leave .github directories unless we are really CLEAN-ing
    if directory.endswith("/.github") and WAFT_CLEAN == 'false':
        subdirectories[:] = []
        continue
    # Leave '__xxxxxxx__' folders unless we are really CLEAN-ing
    if directory.endswith("__") and WAFT_CLEAN == 'false':
        subdirectories[:] = []
        continue
    # Leave 'setup' directories unless we are really CLEAN-ing
    if directory.endswith("/setup") and WAFT_CLEAN == 'false':
        subdirectories[:] = []
        continue
    try:
        # Get addons enabled in current directory
        enabled_addons = addons_full_paths[directory]
    except KeyError:
        # This isn't an addon; is there anything inside to preserve?
        directory += os.path.sep
        if any(addons_full_path.startswith(directory) for addons_full_path in addons_full_paths):
            # Then, let's walk in; we'll remove later if needed
            continue
        else:
            if WAFT_CLEAN == 'false':
                continue
    else:
        # This is an addons repo; do not walk into the enabled ones
        for enabled_addon in enabled_addons:
            subdirectories.remove(enabled_addon)
        continue
    # Remove every other directory
    logger.info("Removing directory %s", directory)
    shutil.rmtree(directory)

logger.info("Linking all addons from %s in %s", ADDONS_YAML_FILE, ADDONS_AUTO_DIRECTORY)

addons_links = glob(os.path.join(ADDONS_AUTO_DIRECTORY, "*"))
for addon_link in addons_links:
    os.remove(addon_link)
addons_full_paths_list = []
for addons_repository_full_path in waft_auto_yaml_dictionary:
    addons_full_paths_tmp_list = []
    if waft_auto_yaml_dictionary[addons_repository_full_path][addons] == [os.path.join(addons_repository_full_path, '*')]:
        if addons_repository_full_path == ODOO_MAIN_CODE_PATH:
            for addon_partial_full_path in glob(os.path.join(ODOO_MAIN_CODE_PATH, 'addons/*')):
                addons_full_paths_tmp_list.append(addon_partial_full_path)
            if ODOO_VERSION not in {'8.0', '9.0'}:
                for addon_partial_full_path in glob(os.path.join(ODOO_MAIN_CODE_PATH, 'openerp/addons/*')):
                    addons_full_paths_tmp_list.append(addon_partial_full_path)
            else:
                for addon_partial_full_path in glob(os.path.join(ODOO_MAIN_CODE_PATH, 'odoo/addons/*')):
                    addons_full_paths_tmp_list.append(addon_partial_full_path)
        else:
            for addon_partial_full_path in glob(os.path.join(addons_repository_full_path, '*')):
                addons_full_paths_tmp_list.append(addon_partial_full_path)
    else:
        for addon_full_tmp_path in waft_auto_yaml_dictionary[addons_repository_full_path][addons]:
            for addon_partial_full_path in glob(addon_full_tmp_path):
                addons_full_paths_tmp_list.append(addon_partial_full_path)
    if waft_auto_yaml_dictionary[addons_repository_full_path][addons_except] == '':
        addons_full_paths_list = addons_full_paths_tmp_list
    else:
        for addon_full_tmp_path in addons_full_paths_tmp_list:
            if addon_full_tmp_path not in waft_auto_yaml_dictionary[addons_repository_full_path][addons_except]:
                addons_full_paths_list.append(addon_full_tmp_path)
    for addon_full_path in addons_full_paths_list:
        auto_directory_addon_relpath = os.path.relpath(addon_full_path, ADDONS_AUTO_DIRECTORY)
        addon_link = os.path.join(ADDONS_AUTO_DIRECTORY, os.path.join(os.path.relpath(addon_full_path, addons_repository_full_path)))
        os.symlink(auto_directory_addon_relpath, addon_link)
        logger.debug("Linked %s in %s", addon_full_path, addon_link)

AUTO_ODOO_CONF_FILE = os.path.join(ODOO_WORK_DIRECTORY, ".ignore/auto/odoo.conf")

# Read the configurations files.
logger.info("Import %s configuration file.", os.path.join(ODOO_WORK_DIRECTORY, "config/odoo-default.conf"))
parser.read(os.path.join(ODOO_WORK_DIRECTORY, "config/odoo-default.conf"))
logger.info("Import %s configuration file.", os.path.join(ODOO_WORK_DIRECTORY, "config/odoo-code-override-default.conf"))
parser.read(os.path.join(ODOO_WORK_DIRECTORY, "config/odoo-code-override-default.conf"))

# Write it to a memory string object
with closing(StringIO()) as generating_odoo_conf_file:
    parser.write(generating_odoo_conf_file)
    generating_odoo_conf_file.seek(0)
    # Obtain the config string
    generated_odoo_conf_file = generating_odoo_conf_file.read()
    # Expand environment variables found within
    generated_odoo_conf_file = Template(generated_odoo_conf_file).substitute(os.environ)
    logger.debug("Resulting configuration:\n%s", AUTO_ODOO_CONF_FILE)
    # Write it to destination
    with open(AUTO_ODOO_CONF_FILE, "w") as auto_odoo_conf_file:
        auto_odoo_conf_file.write(generated_odoo_conf_file)
